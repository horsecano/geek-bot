require("dotenv").config();
const { App } = require("@slack/bolt");
const { DateTime } = require("luxon");
const cron = require("node-cron");
const { MongoClient } = require("mongodb");

const mongoUri = process.env.MONGO_URI;
const dbName = "GeekAttendanceDB"; // ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïù¥Î¶Ñ
let db;

async function connectToMongoDB() {
  try {
    const client = new MongoClient(mongoUri);
    await client.connect();
    db = client.db(dbName);
    console.log("Connected to MongoDB");
  } catch (error) {
    console.error("Error connecting to MongoDB", error);
  }
}

connectToMongoDB();

const slackAppToken = process.env.SLACK_APP_TOKEN;
const slackBotToken = process.env.SLACK_BOT_TOKEN;

const app = new App({
  token: slackBotToken,
  appToken: slackAppToken,
  socketMode: true,
});

let attendanceRecord = {};

// Database Operations
async function saveAttendanceRecordToDB(week) {
  const collection = db.collection("GeekAttendanceRecords");
  await collection.updateOne(
    { week: week },
    { $set: { records: attendanceRecord[week] } },
    { upsert: true }
  );
}

async function loadAttendanceRecordFromDB(week) {
  const collection = db.collection("GeekAttendanceRecords");
  const record = await collection.findOne({ week: week });

  if (record) {
    attendanceRecord[week] = record.records;
    console.log(`Attendance record for ${week} loaded successfully.`);
  } else {
    attendanceRecord[week] = null;
    console.log(`No attendance record found for ${week}.`);
  }
}

async function saveMessageTsToDB(week, ts) {
  const collection = db.collection("GeekMessageTimestamps");
  await collection.updateOne(
    { week: week },
    { $set: { ts: ts } },
    { upsert: true }
  );
}

async function loadMessageTsFromDB(week) {
  const collection = db.collection("GeekMessageTimestamps");
  const record = await collection.findOne({ week: week });
  return record ? record.ts : null;
}

async function initializeWeekRecord(channelId, botUserId) {
  const currentDate = DateTime.local();
  const currentWeek = `Week ${currentDate.weekNumber}`;
  attendanceRecord[currentWeek] = {};

  const membersResponse = await app.client.conversations.members({
    token: slackBotToken,
    channel: channelId,
  });

  const participants = membersResponse.members.filter((id) => id !== botUserId);

  for (const participant of participants) {
    const userInfo = await app.client.users.info({ user: participant });
    const userName = userInfo.user.real_name;
    attendanceRecord[currentWeek][userName] = [
      "‚ùå",
      "‚ùå",
      "‚ùå",
      "‚ùå",
      "‚ùå",
      "üî•",
      "üî•",
    ];
  }

  console.log(`Initialized attendance record for ${currentWeek}.`);
  await saveAttendanceRecordToDB(currentWeek);
}

async function startDailyChallenge() {
  const currentDate = DateTime.local().setZone("Asia/Seoul");
  const currentWeek = `Week ${currentDate.weekNumber}`;

  // Ï∂úÏÑù Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞
  await loadAttendanceRecordFromDB(currentWeek);

  // Ï∂úÏÑù Í∏∞Î°ùÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞ Ï¥àÍ∏∞Ìôî
  if (!attendanceRecord[currentWeek]) {
    console.log("No existing attendance record found. Initializing a new one.");
    const channelId = "C07JKNRSK7H"; // ÏÇ¨Ïö©ÌïòÍ≥†Ïûê ÌïòÎäî Slack Ï±ÑÎÑê ID
    const botUserId = "U07KLRELP19"; // Î¥á ÏÇ¨Ïö©Ïûê ID
    await initializeWeekRecord(channelId, botUserId); // Ï£ºÏ∞® Í∏∞Î°ù Ï¥àÍ∏∞Ìôî
  }

  // Ï¥àÍ∏∞Ìôî ÌõÑÏóêÎèÑ Ï∂úÏÑù Í∏∞Î°ùÏù¥ ÏóÜÏúºÎ©¥ ÏóêÎü¨ Ï≤òÎ¶¨
  if (!attendanceRecord[currentWeek]) {
    console.error("Failed to initialize attendance record.");
    return;
  }

  const month = currentDate.month;
  const week =
    currentDate.weekNumber - currentDate.startOf("month").weekNumber + 1;
  const day = currentDate.setLocale("ko").toFormat("cccc");

  // Î©îÏãúÏßÄ ÌÖçÏä§Ìä∏ Íµ¨ÏÑ±
  let messageText = `${month}Ïõî ${week}Ï£ºÏ∞® ${day} Ïù∏Ï¶ù Í∏∞Î°ù\n`;

  const participants = Object.keys(attendanceRecord[currentWeek]);

  participants.forEach((userName) => {
    messageText += `${userName} : ${attendanceRecord[currentWeek][
      userName
    ].join("")}\n`;
  });

  // SlackÏóê Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const result = await app.client.chat.postMessage({
    channel: "C07JKNRSK7H",
    text: messageText,
  });

  // Î©îÏãúÏßÄ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï†ÄÏû•
  const messageTs = result.ts;
  await saveMessageTsToDB(currentWeek, messageTs);
}

// Scheduled Task
cron.schedule("1 15 * * *", async () => {
  const currentDate = DateTime.local().setZone("Asia/Seoul");

  if (currentDate.weekday === 1) {
    const channelId = "C07JKNRSK7H";
    const botUserId = "U07KLRELP19";
    await initializeWeekRecord(channelId, botUserId);
  } else {
    await startDailyChallenge();
  }
});

// Ïï± Î©òÏÖò Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÌÜµÌï©
app.event("app_mention", async ({ event, say, client }) => {
  try {
    const currentDate = DateTime.local().setZone("Asia/Seoul");
    const eventDate = DateTime.fromSeconds(parseInt(event.ts.split(".")[0]), {
      zone: "Asia/Seoul",
    });

    const currentWeek = `Week ${currentDate.weekNumber}`;
    let messageTs = await loadMessageTsFromDB(currentWeek);

    // Ï±åÎ¶∞ÏßÄ Î©îÏãúÏßÄÏùò ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞ ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º ÏÉùÏÑ±
    if (!messageTs) {
      await say("Ï±åÎ¶∞ÏßÄ Î©îÏãúÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º Í≤åÏãúÌï©ÎãàÎã§.");

      // ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄ ÏÉùÏÑ± Î∞è ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï†ÄÏû•
      const result = await startDailyChallenge(); // ÏÉà Î©îÏãúÏßÄÎ•º ÏÉùÏÑ±ÌïòÍ≥† ts Î∞òÌôò
      messageTs = result.ts;
      await saveMessageTsToDB(currentWeek, messageTs);
    }

    // Ïù∏Ï¶ùÏù¥ ÎßàÍ∞êÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    if (
      currentDate.day > eventDate.day ||
      (currentDate.hour >= 0 && currentDate.hour < 1)
    ) {
      await say({
        text: "Ïò§Îäò Ï±åÎ¶∞ÏßÄ Ïù∏Ï¶ù ÎßàÍ∞ê ÎêòÏóàÏäµÎãàÎã§.",
        thread_ts: event.ts,
      });
      return;
    }

    // Î©îÏãúÏßÄÏóê ÎßÅÌÅ¨Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const hasLink = urlRegex.test(event.text);

    if (!hasLink) {
      await say({
        text: "Ïù∏Ï¶ùÏù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïì∞Î†àÎìú ÎßÅÌÅ¨Î•º Ìè¨Ìï®Ìï¥Ïïº Ìï©ÎãàÎã§.",
        thread_ts: event.ts,
      });
      return;
    }

    const userId = event.user;
    const userInfo = await client.users.info({ user: userId });
    const userName = userInfo.user.real_name;

    await loadAttendanceRecordFromDB(currentWeek);

    // Ï±åÎ¶∞ÏßÄÍ∞Ä ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏùÑ Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (!attendanceRecord[currentWeek]) {
      await say({
        text: "Ï±åÎ¶∞ÏßÄÍ∞Ä ÏïÑÏßÅ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. 'Ï±åÎ¶∞ÏßÄ ÏãúÏûë'ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.",
        thread_ts: event.ts,
      });
      return;
    }

    const participants = Object.keys(attendanceRecord[currentWeek]);

    // Ï∞∏Í∞ÄÏûê Ïù¥Î¶Ñ ÌôïÏù∏
    if (!participants.includes(userName)) {
      await say({
        text: "Ï∞∏Í∞ÄÏûê Ïù¥Î¶ÑÏùÑ ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.",
        thread_ts: event.ts,
      });
      return;
    }

    const today = currentDate.weekday - 1;
    const week =
      currentDate.weekNumber - currentDate.startOf("month").weekNumber + 1;

    attendanceRecord[currentWeek][userName][today] =
      currentDate.weekday === 6 || currentDate.weekday === 7 ? "‚ùáÔ∏è" : "‚úÖ";

    // Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
    let messageText = `${currentDate.month}Ïõî ${week}Ï£ºÏ∞® Ïù∏Ï¶ù Í∏∞Î°ù\n`;
    participants.forEach((name) => {
      messageText += `${name} : ${attendanceRecord[currentWeek][name].join(
        ""
      )}\n`;
    });

    try {
      await client.chat.update({
        channel: event.channel,
        ts: messageTs,
        text: messageText,
      });
    } catch (error) {
      if (error.data && error.data.error === "message_not_found") {
        const result = await startDailyChallenge();
        messageTs = result.ts;
        await saveMessageTsToDB(currentWeek, messageTs);

        await client.chat.update({
          channel: event.channel,
          ts: messageTs,
          text: messageText,
        });
      } else {
        throw error;
      }
    }

    await client.reactions.add({
      channel: event.channel,
      name: "heart",
      timestamp: event.ts,
    });

    await saveAttendanceRecordToDB(currentWeek);
  } catch (error) {
    console.error("Error during the app_mention event:", error);
    await say("Ï±åÎ¶∞ÏßÄ Î©îÏãúÏßÄÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
  }
});

app.command("/Ï±åÎ¶∞ÏßÄÏãúÏûë", async ({ command, ack, say }) => {
  await ack();

  try {
    console.log("/Ï±åÎ¶∞ÏßÄÏãúÏûë Î™ÖÎ†πÏñ¥Í∞Ä Ìä∏Î¶¨Í±∞ÎêòÏóàÏäµÎãàÎã§.");
    await startDailyChallenge();
  } catch (error) {
    console.error("Error starting challenge via /Ï±åÎ¶∞ÏßÄÏãúÏûë command:", error);
    await say("Ï±åÎ¶∞ÏßÄÎ•º ÏãúÏûëÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
  }
});

app.command("/Ï±åÎ¶∞ÏßÄÏÇ≠Ï†ú", async ({ command, ack, say }) => {
  await ack();
  const currentDate = DateTime.local().setZone("Asia/Seoul");
  const currentWeek = `Week ${currentDate.weekNumber}`;
  const collection = db.collection("GeekAttendanceRecords");

  console.log("/Ï±åÎ¶∞ÏßÄÏÇ≠Ï†ú Î™ÖÎ†πÏñ¥Í∞Ä Ìä∏Î¶¨Í±∞ÎêòÏóàÏäµÎãàÎã§.");
  try {
    const result = await collection.deleteOne({ week: currentWeek });
    if (result.deletedCount > 0) {
      delete attendanceRecord[currentWeek];
      await say("ÌòÑÏû¨ Ï£ºÏ∞®Ïùò Ï±åÎ¶∞ÏßÄ Í∏∞Î°ùÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
    } else {
      await say("ÏÇ≠Ï†úÌï† Ï±åÎ¶∞ÏßÄ Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.");
    }
  } catch (error) {
    console.error("Error deleting challenge record:", error);
    await say("Ï±åÎ¶∞ÏßÄ Í∏∞Î°ù ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
  }
});

app.message("ÌÖåÏä§Ìä∏", async ({ message, say }) => {
  console.log(message);
  await say("Ï†ïÏÉÅ");
});

(async () => {
  const port = process.env.PORT || 80;
  await app.start(port);
  console.log(`‚ö°Ô∏è Slack Bolt app is running on port ${port}!`);
})();
